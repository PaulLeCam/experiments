// Generated by CoffeeScript 1.4.0
var bcrypt, debug, everyauth, users;

everyauth = require("everyauth");

bcrypt = require("bcrypt");

debug = require("debug")("app:auth");

users = require("../../repositories/mongo-users");

everyauth.everymodule.userPkey("_id").findUserById(function(id, next) {
  return users.getById(id, next);
}).performRedirect(function(res, location) {
  return res.redirect(303, location);
});

everyauth.password.loginWith("email").getLoginPath("/account/login").postLoginPath("/account/login").loginView("account/login").loginLocals(function(req, res) {
  if (req.session._csrf) {
    return {
      csrf: req.session._csrf
    };
  }
}).authenticate(function(email, password) {
  var errors, promise;
  errors = [];
  if (!email) {
    errors.push("Missing email");
  }
  if (!password) {
    errors.push("Missing password");
  }
  if (errors.length) {
    return errors;
  }
  promise = this.Promise();
  users.getOne({
    email: email
  }, function(err, user) {
    if (err) {
      return promise.fulfill(["Wrong email or password"]);
    } else {
      return bcrypt.compare(password, user.hash, function(err, success) {
        debug("Login success? %s", success);
        if (err || !success) {
          return promise.fulfill(["Wrong email or password"]);
        } else {
          return promise.fulfill(user);
        }
      });
    }
  });
  return promise;
}).respondToLoginSucceed(function(res, user, data) {
  var location;
  location = user && data.session.redirectTo ? data.session.redirectTo : "/";
  return this.redirect(res, location);
}).getRegisterPath("/account/register").postRegisterPath("/account/register").registerView("account/register").registerLocals(function(req, res) {
  if (req.session._csrf) {
    return {
      csrf: req.session._csrf
    };
  }
}).extractExtraRegistrationParams(function(req) {
  return {
    password_conf: req.body.password_conf
  };
}).validateRegistration(function(data, errors) {
  if (data.password.length !== 0 && data.password.length < 5) {
    errors.push("Password must be at least 5 characters long");
  }
  if (!data.password_conf) {
    errors.push("Missing password confirmation");
  } else if (data.password_conf !== data.password) {
    errors.push("Password and confirmation do not match");
  }
  return errors;
}).registerUser(function(data) {
  var promise;
  debug("Registration data is valid, let's move on!");
  promise = this.Promise();
  users.getOne({
    email: data.email
  }, function(err, user) {
    var password, salt;
    if (user) {
      return promise.fulfill(["Email already taken"]);
    } else {
      password = data.password;
      salt = bcrypt.genSaltSync(10);
      delete data.password;
      delete data.password_conf;
      data.hash = bcrypt.hashSync(password, salt);
      return users.createOne(data, function(err, user) {
        if (err) {
          return promise.fulfill(["Failed to create account"]);
        } else {
          return promise.fulfill(user);
        }
      });
    }
  });
  return promise;
}).respondToRegistrationSucceed(function(res, user, data) {
  var location;
  location = user && data.session.redirectTo ? data.session.redirectTo : "/";
  return this.redirect(res, location);
});

exports.middleware = everyauth.middleware;
