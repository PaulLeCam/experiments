// Generated by CoffeeScript 1.4.0
var MongoRepository, Repository, debug, mongo,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

Repository = require("./repository");

debug = require("debug")("app:repository:mongo");

mongo = require("../database/mongo");

MongoRepository = (function(_super) {

  __extends(MongoRepository, _super);

  function MongoRepository(data) {
    if (data == null) {
      data = {};
    }
    MongoRepository.__super__.constructor.call(this, data);
    this.col = mongo.get(this.name);
  }

  MongoRepository.prototype.getById = function(id, next) {
    var _this = this;
    return this.col.findById(id).error(next).success(function(doc) {
      if (doc) {
        return next(null, _this["export"](_this.entity(doc)));
      } else {
        return next(null, false);
      }
    });
  };

  MongoRepository.prototype.getOne = function(query, next) {
    var _this = this;
    if (query == null) {
      query = {};
    }
    return this.col.findOne(query).error(next).success(function(doc) {
      if (doc) {
        return next(null, _this["export"](_this.entity(doc)));
      } else {
        return next(null, false);
      }
    });
  };

  MongoRepository.prototype.getAll = function(query, next) {
    var _this = this;
    if (query == null) {
      query = {};
    }
    return this.col.find(query).error(next).success(function(docs) {
      var doc, res;
      if (docs) {
        res = (function() {
          var _i, _len, _results;
          _results = [];
          for (_i = 0, _len = docs.length; _i < _len; _i++) {
            doc = docs[_i];
            _results.push(this["export"](this.entity(doc)));
          }
          return _results;
        }).call(_this);
        return next(null, res);
      } else {
        return next(null, false);
      }
    });
  };

  MongoRepository.prototype.createOne = function(entity, next) {
    var _this = this;
    return this.col.insert(this["import"](entity)).error(next).success(function(doc) {
      return next(null, _this["export"](_this.entity(doc)));
    });
  };

  MongoRepository.prototype.updateOne = function(entity, next) {
    var _this = this;
    return this.col.updateById(entity._id, this["import"](entity)).error(next).success(function(doc) {
      return next(null, _this["export"](_this.entity(doc)));
    });
  };

  MongoRepository.prototype.saveOne = function(entity, next) {
    if (entity._id) {
      return this.updateOne(entity, next);
    } else {
      return this.createOne(entity, next);
    }
  };

  MongoRepository.prototype.deleteOne = function(entity, next) {
    var _this = this;
    return this.col.remove({
      _id: entity._id
    }).error(next).success(function() {
      return next(null);
    });
  };

  return MongoRepository;

})(Repository);

module.exports = MongoRepository;
